// ------------------------------------------------------------
//  Trabalho Projetos em Computação I - Máquina Virtual
//
// Alunos: Guilherme Cousin, Marlon Dias
// GitHub: https://github.com/marlonsd/PCI-VirtualMachine
// README
// ------------------------------------------------------------

   O trabalho consiste na de uma máquina virtual de uma arquitura hipotética.
Este é um trabalho desenvolvido para a disciplina de Projetos em Computação do
curso de Ciência da Computação da Universidade Federal de Pelotas.

	Para compilar, usar no terminal:$ make
	Para limpar, usar no terminal:	$ make clean
	clean - remove os arquivos .o e o executável do programa
	
	O código deve ser todo carregado para a máquina e, além disso, para
indicar o fim da inserção do código, deve ser adicionar '@' ao fim.
Exemplo:
	14A3
	20C7
	B400
	C000
	@
	
	As instruções são formadas por dois bytes, ou 4 dígitos no código.
	
	É por conta total do programador fazer os saltos corretos. A máquina
lê um bytes (dois dígitos) por vez.
	
	Caso a instrução esteja no formato adequado a instrução não será executada.
No exemplo do halt, se estiverem faltando '000' não será executado. Exemplo:
C000 - executa normalmente; C100 - Erro; C - Erro. O mesmo é válido para instruções
com 0.
	
	A cada passo da execução é impresso na tela o valor anterior do registrador ou
memória que será alterado, o que será feito, e o resultado após a execução do comando.
Além disso, no final, é impresso TODOS os registradores.
	
	Nos mostradores temporários de registradores, os valores estão sendo impressos em
hexadecial. (Um caso tipo, o valor -1 é representado por 0xFFFFFFFF, porém, os registradores
são de 1 byte).
								Fibonacci

	Linha 06 contém o elemento da sequência desejado (26XX).

Asembly:
	00	2001
	02	2100
	04	2201
	06	2407
	08	2FFF
	0A	B416
	0C	5312
	0E	4021
	10	4032
	12	544F
	14	B00A
	16	C000
	@
	
Pseudo-Código:
		r0 = 0;
		r1 = 0;
		r2 = 1;
		r3 = -1;
		r4 = n;
inicio:	if (r0 == r4){
			go to fim
		} else {
			r3 = r1 + r2;
			r1 = r2;
			r2 = r3;
			r4--;
			if (r0 == r0) 
				go to inicio
		}

					Instruções da Máquina:
-- 1RXY
	R <- CONTEÚDO de XY
	
-- 2RXY
	R <- ENDEREÇO de XY
	
-- 3RXY
	XY <- R (Conteúdo)

-- 40RS
	S <- R

-- 5RST
	R <- S + T (C/ complemento de 2)
	
-- 6RST
	R <- S + T (Ponto flutuante) /* Não implementada (nem checado o formato) */
	
-- 7RST
	R <- S OR T
	
-- 8RST
	R <- S AND T
	
-- 9RST
	R <- S XOR T

-- AR0X
	Rotaciona R para direita, X vezes.
	
-- BRXY
	Se R == R(0) go to XY
	
-- C000
	Halt
